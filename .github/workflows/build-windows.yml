name: Build Windows App

on:
  workflow_dispatch:
    inputs:
      app_version:
        description: '应用版本号 - 4位格式 (如: 1.2.0.0)'
        required: true
        default: '1.0.0.0'
        type: string
      flutter_version:
        description: 'Flutter版本'
        required: false
        default: '3.35.3'
        type: choice
        options:
          - '3.35.3'
          - '3.29.2'
          - '3.27.0'
          - 'latest'
      build_type:
        description: '构建类型'
        required: false
        default: 'release'
        type: choice
        options:
          - 'release'
          - 'profile'

jobs:
  build-windows:
    runs-on: windows-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Setup Flutter
      uses: subosito/flutter-action@v2
      with:
        flutter-version: ${{ github.event.inputs.flutter_version || '3.29.2' }}
        channel: 'stable'
        cache: true
        
    - name: Enable Windows desktop
      run: flutter config --enable-windows-desktop
      
    - name: Update versions
      run: |
        $version = "${{ github.event.inputs.app_version || '1.0.0.0' }}"
        
        # 验证版本号格式（应为4位：x.x.x.x）
        if ($version -notmatch '^\d+\.\d+\.\d+\.\d+$') {
          Write-Error "版本号格式错误！必须是4位格式，如: 1.0.0.0"
          exit 1
        }
        
        # 提取前三位用于 Flutter 版本（x.x.x）
        if ($version -match '^(\d+\.\d+\.\d+)\.\d+$') {
          $flutterVersion = $matches[1]
        } else {
          Write-Error "无法从版本号提取Flutter版本"
          exit 1
        }
        
        # ⚠️ Microsoft Store 要求：MSIX 版本号的第四位（Revision）必须为 0
        # 强制将第四位设为 0
        $msixVersion = "$flutterVersion.0"
        
        # 更新 pubspec.yaml 中的版本（不带构建号）
        $pubspecContent = Get-Content pubspec.yaml -Raw
        $pubspecContent = $pubspecContent -replace 'version:\s*[\d\.]+\+?\d*', "version: $flutterVersion"
        
        # 更新 pubspec.yaml 中的 msix_version（保留缩进）
        $pubspecContent = $pubspecContent -replace '(\s*)msix_version:\s*[\d\.]+', "`$1msix_version: $msixVersion"
        $pubspecContent | Set-Content pubspec.yaml -NoNewline
        
        Write-Output "Updated Flutter version to: $flutterVersion"
        Write-Output "Updated MSIX version to: $msixVersion (Revision set to 0 for MS Store compliance)"
        
    - name: Flutter doctor
      run: flutter doctor -v
      
    - name: Get dependencies
      run: flutter pub get
      
    - name: Clean previous builds
      run: flutter clean
      
    - name: Build Windows app
      run: flutter build windows --${{ github.event.inputs.build_type || 'release' }} --verbose
      
    - name: Verify MSIX configuration
      shell: pwsh
      run: |
        Write-Host "=== 验证 MSIX 配置 ===" -ForegroundColor Cyan
        Write-Host ""
        
        # Microsoft Store 要求的正确值
        $EXPECTED_PUBLISHER = "CN=14B607B9-7CF3-42D9-9054-090F3ECEC1D7"
        $EXPECTED_IDENTITY_NAME = "Shangjinyun.330094822087A"
        
        # 读取 pubspec.yaml 配置
        $pubspecContent = Get-Content pubspec.yaml -Raw
        
        # 检查 publisher 配置
        if ($pubspecContent -match 'publisher:\s*([^\r\n]+)') {
          $publisher = $matches[1].Trim()
          Write-Host "Publisher 配置: $publisher" -ForegroundColor Yellow
          
          if ($publisher -eq $EXPECTED_PUBLISHER) {
            Write-Host "✅ Publisher 配置正确" -ForegroundColor Green
          } else {
            Write-Host "⚠️ Publisher 配置不匹配!" -ForegroundColor Red
            Write-Host "  预期值: $EXPECTED_PUBLISHER" -ForegroundColor Yellow
            Write-Host "  当前值: $publisher" -ForegroundColor Yellow
          }
        } else {
          Write-Host "❌ 未找到 publisher 配置" -ForegroundColor Red
        }
        
        # 检查 identity_name 配置
        if ($pubspecContent -match 'identity_name:\s*([^\r\n]+)') {
          $identityName = $matches[1].Trim()
          Write-Host "Identity Name 配置: $identityName" -ForegroundColor Yellow
          
          if ($identityName -eq $EXPECTED_IDENTITY_NAME) {
            Write-Host "✅ Identity Name 配置正确" -ForegroundColor Green
          } else {
            Write-Host "⚠️ Identity Name 配置不匹配!" -ForegroundColor Red
            Write-Host "  预期值: $EXPECTED_IDENTITY_NAME" -ForegroundColor Yellow
            Write-Host "  当前值: $identityName" -ForegroundColor Yellow
          }
        } else {
          Write-Host "❌ 未找到 identity_name 配置" -ForegroundColor Red
        }
        
        # 检查 capabilities 配置（不应包含 runFullTrust）
        if ($pubspecContent -match 'capabilities:\s*([^\r\n]+)') {
          $capabilities = $matches[1].Trim()
          Write-Host "Capabilities 配置: $capabilities" -ForegroundColor Yellow
          
          if ($capabilities -match 'runFullTrust') {
            Write-Host "⚠️ 警告: capabilities 包含 runFullTrust（应该由 Flutter 自动添加）" -ForegroundColor Yellow
          } else {
            Write-Host "✅ Capabilities 配置正确（不包含 runFullTrust）" -ForegroundColor Green
          }
        }
        
        Write-Host ""
        Write-Host "ℹ️ 注意: 本地构建可能使用测试证书，Store 会在提交后自动重新签名" -ForegroundColor Cyan
        Write-Host ""
      
    - name: Build MSIX installer
      shell: pwsh
      continue-on-error: true  # 允许MSIX构建失败，但继续执行后续步骤
      run: |
        Write-Host "构建MSIX安装包..." -ForegroundColor Yellow
        
        # 设置非交互式环境变量
        $env:CI = "true"
        $env:MSIX_SILENT = "true"
        $env:FLUTTER_SUPPRESS_ANALYTICS = "true"
        
        try {
          # 确保MSIX配置文件存在
          if (!(Test-Path "msix_config.yaml")) {
            Write-Warning "msix_config.yaml 不存在，使用默认配置"
          }
          
          # 检查Windows构建是否成功
          $buildType = "${{ github.event.inputs.build_type || 'release' }}"
          $buildPath = if ($buildType -eq "release") { "build/windows/x64/runner/Release" } else { "build/windows/x64/runner/Profile" }
          
          if (!(Test-Path "$buildPath/thoughtecho.exe")) {
            Write-Error "Windows构建文件不存在: $buildPath/thoughtecho.exe"
            "msix_success=false" | Out-File -FilePath $env:GITHUB_OUTPUT -Append -Encoding utf8
            exit 1
          }
          
          Write-Host "开始构建MSIX包..." -ForegroundColor Green
          
          # 直接运行MSIX创建命令
          flutter pub run msix:create
          $exitCode = $LASTEXITCODE
          
          if ($exitCode -eq 0) {
            # 检查MSIX文件是否实际创建成功（尝试多个可能的文件名）
            $possibleMsixPaths = @(
              "build/windows/x64/runner/Release/ThoughtEcho-Setup.msix",
              "build/windows/x64/runner/Release/thoughtecho.msix"
            )
            
            $msixPath = $null
            foreach ($path in $possibleMsixPaths) {
              if (Test-Path $path) {
                $msixPath = $path
                break
              }
            }
            
            if ($msixPath) {
              $msixSize = (Get-Item $msixPath).Length
              Write-Host "MSIX构建成功！文件: $msixPath, 大小: $([math]::Round($msixSize/1MB, 2)) MB" -ForegroundColor Green
              "msix_success=true" | Out-File -FilePath $env:GITHUB_OUTPUT -Append -Encoding utf8
              "msix_path=$msixPath" | Out-File -FilePath $env:GITHUB_OUTPUT -Append -Encoding utf8
            } else {
              Write-Warning "MSIX命令执行成功但文件未找到，尝试过的路径: $($possibleMsixPaths -join ', ')"
              "msix_success=false" | Out-File -FilePath $env:GITHUB_OUTPUT -Append -Encoding utf8
            }
          } else {
            Write-Warning "MSIX构建失败(退出码: $exitCode)"
            "msix_success=false" | Out-File -FilePath $env:GITHUB_OUTPUT -Append -Encoding utf8
          }
        }
        catch {
          Write-Warning "MSIX构建异常: $($_.Exception.Message)"
          "msix_success=false" | Out-File -FilePath $env:GITHUB_OUTPUT -Append -Encoding utf8
        }
      id: msix_build
      env:
        FLUTTER_SUPPRESS_ANALYTICS: true
      
    - name: Get app version
      id: version
      run: |
        $content = Get-Content pubspec.yaml -Raw
        if ($content -match 'version:\s*([\d\.]+\+?\d*)') {
          $version = $matches[1]
          "version=$version" | Out-File -FilePath $env:GITHUB_OUTPUT -Append
          Write-Output "App version: $version"
        } else {
          Write-Error "无法从 pubspec.yaml 中提取版本号"
          exit 1
        }
      
    - name: Create release packages
      run: |
        $buildType = "${{ github.event.inputs.build_type || 'release' }}"
        $buildPath = if ($buildType -eq "release") { "build/windows/x64/runner/Release" } else { "build/windows/x64/runner/Profile" }
        $version = "${{ steps.version.outputs.version }}"
        
        if (!(Test-Path $buildPath)) {
            Write-Error "构建路径不存在: $buildPath"
            exit 1
        }
        
        # 创建ZIP压缩包
        $archiveName = "thoughtecho-windows-x64-v$version-$buildType.zip"
        New-Item -ItemType Directory -Path "release_temp" -Force
        Copy-Item -Path "$buildPath/*" -Destination "release_temp/" -Recurse
        
        # 创建版本信息文件内容
        $versionInfo = "ThoughtEcho Windows版本信息`n版本: $version`n构建类型: $buildType`n构建时间: $(Get-Date -Format 'yyyy-MM-dd HH:mm:ss')`nFlutter版本: ${{ github.event.inputs.flutter_version || '3.29.2' }}`n提交: ${{ github.sha }}`n`n使用说明:`n1. 解压到任意文件夹`n2. 双击 thoughtecho.exe 启动应用`n3. 如遇问题请查看 logs 文件夹下的日志文件`n`n注意事项:`n- 首次启动可能需要等待数秒`n- 确保系统已安装Visual C++ Redistributable`n- 建议在解压后将整个文件夹添加到杀毒软件白名单"
        $versionInfo | Out-File -FilePath "release_temp/VERSION_INFO.txt" -Encoding UTF8
        $versionInfo | Out-File -FilePath "release_temp/版本信息.txt" -Encoding UTF8

        # 创建启动脚本内容
        $launchScript = "@echo off`necho 正在启动 ThoughtEcho...`necho 首次启动可能需要等待数秒，请耐心等待`necho.`nstart thoughtecho.exe`necho 如果应用未正常启动，请检查版本信息.txt中的注意事项`npause"
        $launchScript | Out-File -FilePath "release_temp/LAUNCH_APP.bat" -Encoding Default
        $launchScript | Out-File -FilePath "release_temp/启动应用.bat" -Encoding Default
        
        Compress-Archive -Path "release_temp/*" -DestinationPath $archiveName -Force
        
        # 检查MSIX文件是否存在（改进逻辑）
        $msixSuccess = "${{ steps.msix_build.outputs.msix_success }}" -eq "true"
        $msixPath = "${{ steps.msix_build.outputs.msix_path }}"
        $msixFound = $false
        
        # 先检查输出路径中的MSIX文件
        if ($msixSuccess -and $msixPath -and (Test-Path $msixPath)) {
            $msixFound = $true
            $sourceMsixPath = $msixPath
            Write-Host "✅ 在输出路径找到MSIX: $msixPath" -ForegroundColor Green
        } 
        # 如果输出路径没有找到，尝试在构建目录中查找
        else {
            Write-Host "⚠️ 输出路径未找到MSIX，尝试在构建目录搜索..." -ForegroundColor Yellow
            $possiblePaths = @(
                "build/windows/x64/runner/Release/ThoughtEcho-Setup.msix",
                "build/windows/x64/runner/Release/thoughtecho.msix",
                "build/windows/runner/Release/ThoughtEcho-Setup.msix",
                "build/windows/runner/Release/thoughtecho.msix",
                "build/windows/x64/ThoughtEcho-Setup.msix",
                "build/windows/x64/thoughtecho.msix"
            )
            
            foreach ($path in $possiblePaths) {
                if (Test-Path $path) {
                    $msixFound = $true
                    $sourceMsixPath = $path
                    Write-Host "✅ 在备选路径找到MSIX: $path" -ForegroundColor Green
                    break
                }
            }
        }
        
        # 如果找到MSIX文件，复制并设置输出
        if ($msixFound) {
            $msixName = "thoughtecho-windows-x64-v$version-$buildType.msix"
            Copy-Item -Path $sourceMsixPath -Destination $msixName -Force
            
            # 验证复制成功
            if (Test-Path $msixName) {
                $msixSize = (Get-Item $msixName).Length
                Write-Host "✅ 成功创建MSIX安装包: $msixName (大小: $([math]::Round($msixSize/1MB, 2)) MB)" -ForegroundColor Green
                "msix_name=$msixName" | Out-File -FilePath $env:GITHUB_OUTPUT -Append -Encoding utf8
                "has_msix=true" | Out-File -FilePath $env:GITHUB_OUTPUT -Append -Encoding utf8
            } else {
                Write-Warning "MSIX文件复制失败"
                "has_msix=false" | Out-File -FilePath $env:GITHUB_OUTPUT -Append -Encoding utf8
            }
        } else {
            Write-Host "⚠️ 未找到MSIX文件，将只提供ZIP包" -ForegroundColor Yellow
            if (!$msixSuccess) {
                Write-Host "  原因: MSIX构建步骤报告失败" -ForegroundColor Gray
            } elseif (!$msixPath) {
                Write-Host "  原因: MSIX文件路径未设置" -ForegroundColor Gray
            }
            Write-Host "✅ Windows应用已成功构建，可通过ZIP包分发" -ForegroundColor Green
            "has_msix=false" | Out-File -FilePath $env:GITHUB_OUTPUT -Append -Encoding utf8
        }
        
        "archive_name=$archiveName" | Out-File -FilePath $env:GITHUB_OUTPUT -Append -Encoding utf8
        Write-Output "✅ 创建ZIP发布包: $archiveName"
      id: archive
      
    - name: Upload ZIP build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: thoughtecho-windows-${{ github.event.inputs.build_type || 'release' }}-zip
        path: ${{ steps.archive.outputs.archive_name }}
        retention-days: 90
        
    - name: Upload MSIX installer
      if: steps.archive.outputs.has_msix == 'true'
      uses: actions/upload-artifact@v4
      with:
        name: thoughtecho-windows-${{ github.event.inputs.build_type || 'release' }}-msix
        path: ${{ steps.archive.outputs.msix_name }}
        retention-days: 90
        
    - name: Build summary
      run: |
        $version = "${{ steps.version.outputs.version }}"
        $buildType = "${{ github.event.inputs.build_type || 'release' }}"
        $archiveName = "${{ steps.archive.outputs.archive_name }}"
        $msixName = "${{ steps.archive.outputs.msix_name }}"
        $hasMsix = "${{ steps.archive.outputs.has_msix }}" -eq "true"
        
        Write-Output "## 🎉 Windows构建完成" >> $env:GITHUB_STEP_SUMMARY
        Write-Output "" >> $env:GITHUB_STEP_SUMMARY
        Write-Output "### 📋 构建信息" >> $env:GITHUB_STEP_SUMMARY
        Write-Output "- **应用版本**: $version" >> $env:GITHUB_STEP_SUMMARY
        Write-Output "- **构建类型**: $buildType" >> $env:GITHUB_STEP_SUMMARY
        Write-Output "- **Flutter版本**: ${{ github.event.inputs.flutter_version || '3.29.2' }}" >> $env:GITHUB_STEP_SUMMARY
        Write-Output "- **提交哈希**: ${{ github.sha }}" >> $env:GITHUB_STEP_SUMMARY
        Write-Output "" >> $env:GITHUB_STEP_SUMMARY
        Write-Output "### 📦 发布文件" >> $env:GITHUB_STEP_SUMMARY
        Write-Output "- **ZIP压缩包**: ✅ $archiveName" >> $env:GITHUB_STEP_SUMMARY
        
        if ($hasMsix -and $msixName) {
            Write-Output "- **MSIX安装包**: ✅ $msixName" >> $env:GITHUB_STEP_SUMMARY
        } else {
            Write-Output "- **MSIX安装包**: ❌ 构建失败（可使用ZIP包替代）" >> $env:GITHUB_STEP_SUMMARY
        }
        
        Write-Output "" >> $env:GITHUB_STEP_SUMMARY
        Write-Output "### 📥 下载说明" >> $env:GITHUB_STEP_SUMMARY
        Write-Output "1. 在Actions页面的Artifacts部分下载对应的发布包" >> $env:GITHUB_STEP_SUMMARY
        Write-Output "2. **ZIP包**: 解压后直接运行 thoughtecho.exe" >> $env:GITHUB_STEP_SUMMARY
        
        if ($hasMsix) {
            Write-Output "3. **MSIX包**: 双击安装到系统（推荐）" >> $env:GITHUB_STEP_SUMMARY
        } else {
            Write-Output "3. **MSIX包**: 本次构建失败，请使用ZIP包" >> $env:GITHUB_STEP_SUMMARY
        }
        
        Write-Output "" >> $env:GITHUB_STEP_SUMMARY
        Write-Output "### ⚠️ 注意事项" >> $env:GITHUB_STEP_SUMMARY
        Write-Output "- 首次启动可能需要等待数秒" >> $env:GITHUB_STEP_SUMMARY
        Write-Output "- 确保系统已安装 Visual C++ Redistributable" >> $env:GITHUB_STEP_SUMMARY
        Write-Output "- 建议将应用文件夹添加到杀毒软件白名单" >> $env:GITHUB_STEP_SUMMARY
